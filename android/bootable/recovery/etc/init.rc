import /init.recovery.${ro.hardware}.rc

on early-init
    start ueventd
    insmod /disp.ko
	insmod /lcd.ko
	insmod /hdmi.ko
on init
    export PATH /sbin
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard
    insmod /nand.ko
    insmod /sw_device.ko debug_mask=0xff ctp_mask=1
    insmod /touch.ko
    insmod /keyboard.ko
    insmod /gpio-sunxi.ko

    symlink /system/etc /etc

    mkdir /sdcard
    mkdir /system
    mkdir /bootloader
    mkdir /data
    mkdir /cache
    mkdir /usb
    mkdir /extsd
    mount /tmp /tmp tmpfs
   
    chown root shell /tmp
    chmod 0775 /tmp
    exec /sbin/busybox sh /sbin/init_parttion.sh

    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 18D1
    write /sys/class/android_usb/android0/idProduct D001
    write /sys/class/android_usb/android0/functions adb
    write /sys/class/android_usb/android0/iManufacturer ${ro.product.manufacturer}
    write /sys/class/android_usb/android0/iProduct ${ro.product.model}
    write /sys/class/android_usb/android0/iSerial ${ro.serialno}
    
on boot

    ifup lo
    hostname localhost
    domainname localdomain

    class_start default

service ueventd /sbin/ueventd
    critical

service recovery /sbin/recovery

service adbd /sbin/adbd recovery
    disabled

# Always start adbd on userdebug and eng builds
on property:ro.debuggable=1
    write /sys/class/android_usb/android0/enable 1
    start adbd

# Restart adbd so it can run as root
on property:service.adb.root=1
    write /sys/class/android_usb/android0/enable 0
    restart adbd
    write /sys/class/android_usb/android0/enable 1


