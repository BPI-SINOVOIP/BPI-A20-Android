/* -*- c++ -*- */
/*
 * Copyright (C) 2010 The Android Open Source Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef ANDROID_ASTL_OSTREAM__
#define ANDROID_ASTL_OSTREAM__

#include <ios_base.h>
#include <basic_ios.h>
#include <ios_pos_types.h>
#include <char_traits.h>

namespace std {

/**
 * Basic implementation of ostream. The STL standard defines a
 * basic_ostream template that gets specialized for char and
 * wchar. Since Android supports only char, we don't use a template
 * here.
 */
class streambuf;
class ostream: public basic_ios
{
  public:
    typedef char                             char_type;
    typedef char_traits<char_type>::int_type int_type;
    typedef char_traits<char_type>::pos_type pos_type;
    typedef char_traits<char_type>::off_type off_type;

  protected:
    ostream();

  public:
    explicit ostream(streambuf *sb) { this->init(sb); }
    virtual ~ostream();

    // Synchronize the stream buffer.
    ostream& flush();

    // Formatted output.
    /**
     * Interface for manipulators (e.g std::endl, std::hex in
     * expression like "std::cout << std::endl"). See iomanip header.
     */
    ostream& operator<<(ostream& (*manip)(ostream&)) { return manip(*this); }
    ostream& operator<<(ios_base& (*manip)(ios_base&)) {
        manip(*this);
        return *this;
    }

    ostream& operator<<(unsigned long int val);
    ostream& operator<<(long int val);
    ostream& operator<<(unsigned int val);
    ostream& operator<<(int val);
    ostream& operator<<(unsigned long long int val);
    ostream& operator<<(long long int val);

    ostream& operator<<(double val);
    ostream& operator<<(float val);

    ostream& operator<<(char_type c);
    ostream& operator<<(const char_type *str);
    ostream& operator<<(bool val);

    // '(nil)' if p == 0
    ostream& operator<<(const void *p);

    // This is non standard, used by string.
    ostream& write_formatted(const char_type *str, streamsize num);

    // Unformatted output.
    ostream& put(char_type c);
    ostream& write(const char_type *str, streamsize num);
};

/**
 * Flushes the output stream.
 */
inline ostream& flush(ostream& os) { return os.flush(); }

/**
 * Write a newline and flush the stream.
 */
inline ostream& endl(ostream& os) { return flush(os.put('\n')); }

/**
 * Write a null character into the output sequence.
 */
inline ostream& ends(ostream& os) { return os.put(char()); }

}  // namespace std

#endif
